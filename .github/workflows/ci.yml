name: CI

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            artifact_name: ehost-linux-amd64
            goarch: amd64
          - os: macos-latest
            artifact_name: ehost-darwin-amd64
            goarch: amd64
          - os: macos-latest
            artifact_name: ehost-darwin-arm64
            goarch: arm64
          - os: windows-latest
            artifact_name: ehost-windows-amd64.exe
            goarch: amd64

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - uses: actions/setup-go@v4
        with:
          go-version: '1.23.3'

      - name: Set Version
        id: version
        shell: bash
        run: |
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          else
            echo "VERSION=$(git describe --tags --always --dirty)" >> $GITHUB_OUTPUT
          fi

      - name: Build
        run: |
          make build
        env:
          VERSION: ${{ steps.version.outputs.VERSION }}
          GOOS: ${{ matrix.os == 'windows-latest' && 'windows' || matrix.os == 'macos-latest' && 'darwin' || 'linux' }}
          GOARCH: ${{ matrix.goarch }}

      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.artifact_name }}
          path: ehost-${{ steps.version.outputs.VERSION }}
          if-no-files-found: error

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Download Artifacts
        uses: actions/download-artifact@v3
        with:
          path: dist

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: dist/**/*
          generate_release_notes: true
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
