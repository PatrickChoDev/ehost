name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  repository_dispatch:
    types: [release-created]

jobs:
  check-release:
    runs-on: ubuntu-latest
    outputs:
      is-release: ${{ github.event_name == 'repository_dispatch' && github.event.action == 'release-created' && github.event.client_payload.merged }}
    steps:
      - run: echo "Checking if this is a release build"

  build:
    needs: check-release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux-amd64
            goarch: amd64
          - os: macos-latest
            platform: darwin-amd64
            goarch: amd64
          - os: macos-latest
            platform: darwin-arm64
            goarch: arm64
          - os: windows-latest
            platform: windows-amd64
            goarch: amd64

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ github.event.client_payload.ref || github.ref }}

      - uses: actions/setup-go@v4
        with:
          go-version: '1.23.3'

      - name: Get Short SHA
        id: sha
        run: echo "sha=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Build
        run: |
          make build
        env:
          VERSION: ${{ needs.check-release.outputs.is-release == 'true' && github.event.client_payload.ref || steps.sha.outputs.sha }}
          GOOS: ${{ matrix.os == 'windows-latest' && 'windows' || matrix.os == 'macos-latest' && 'darwin' || 'linux' }}
          GOARCH: ${{ matrix.goarch }}

      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ needs.check-release.outputs.is-release == 'true' && format('ehost-{0}-{1}', github.event.client_payload.ref, matrix.platform) || format('ehost-{0}-{1}', steps.sha.outputs.sha, matrix.platform) }}
          path: |
            bin/*
          if-no-files-found: error

  release:
    needs: [check-release, build]
    runs-on: ubuntu-latest
    if: needs.check-release.outputs.is-release == 'true'

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Download Artifacts
        uses: actions/download-artifact@v3
        with:
          path: dist

      - name: Prepare Release Assets
        run: |
          mkdir -p release
          mv dist/*/* release/

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: release/*
          generate_release_notes: true
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
